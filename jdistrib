##
#
# jdistrib [-h] [-min min_y] [-max max_y] [-n n_bin|-d bin_size] xy_file
#
# jdistrib uses a serie of (x;y) points to generate a histogram of 
# probability p(y)=p(y-dy/2<y'<y+dy/2). By default, p(y) is calculated
# for histogram bins centered around the nbin y values ranging from min(y(x)) 
# to max(y(x)), i.e. dy = (max-min)/(nbin-1).
#
# Options:
#   -h          : print this header comment
#   -min min_y  : use specified value for the min(y(x)) (by default, calculated)
#   -max max_y  : use specified value for the max(y(x)) (by default, calculated)
#   -n n_bin    : n_bin bins will be used to make the histogram between
#                 min(y(x)) and max(y(x)) (default 21)
#   -d bin_size : specified bin size - min and max will be recalculated to 
#                 be integer multiples of bin_size (default (max-min)/(nbin-1))
#   xy_file     : two column file containing (x;y) points, comment lines 
#                 (beginning with a '#') are ignored.
#
# A warning comment will be printed if the previous settings do not allow
# to display the whole distribution.
#
##

set nbindef = 21

set nbin = noset
set dy = noset
set min = noset
set max = noset

# check options
10:
if ( '#'$1'#' == '#-h#' ) then
  cat `which $0` | sed '/^#/\!q'
  exit
endif
#
if ( '#'$1'#' == '#-n#' ) then
  shift
  set nbin = $1
  shift
  goto 10
endif
#
if ( '#'$1'#' == '#-min#' ) then
  shift
  set min = $1
  shift
  goto 10
endif
#
if ( '#'$1'#' == '#-max#' ) then
  shift
  set max = $1
  shift
  goto 10
endif
#
if ( '#'$1'#' == '#-d#' ) then
  shift
  set dy = $1
  shift
  goto 10
endif
# done

if ( $nbin == noset ) then
  set nbin = $nbindef
else
  if ( $dy != noset ) then
    echo '-n and -d options are incompatible'
    exit 1
  endif
endif

if ( $min == noset ) then
  set min = `egrep -v '^#' $1 | awk '{if(NR==1||$2-min<0){min=$2}}END{print min}'`
endif
if ( $max == noset ) then
  set max = `egrep -v '^#' $1 | awk '{if(NR==1||$2-max>0){max=$2}}END{print max}'`
endif

if ( $dy != noset ) then
  set min = `echo $min $dy | gawk '{nm=$2*int($1/$2)}{if(nm<=$1-0.5*$2){print nm-$2}else{print nm-2*$2}}'`
  set max = `echo $max $dy | gawk '{nm=$2*int($1/$2)}{if(nm>=$1+0.5*$2){print nm+$2}else{print nm+2*$2}}'`
  set nbin = `echo $min $max $dy | awk '{ print 1+($2-$1)/$3}'`
endif


egrep -v '^#' $1 | gawk -v min=$min -v max=$max -v nbin=$nbin '\
BEGIN {\
  dy = (max-min)/(nbin-1)\
  off = -min+0.5*dy\
  printf "# MIN: %f - MAX: %f - BIN SIZE: %f\n",min,max,dy\
  for (i=0;i<=nbin;i++) { bin[i] = 0.0 }\
}{\
  i = int(($2-min)/dy)\
  if ( lfl != 1 && ( i<0 || i>= nbin ) ) {\
    printf ("#WARNING: distribution truncated\n")\
    lfl = 1\
  }\
  bin[i]++\
} END {\
  for (i=0;i<nbin;i++) { printf "%12.5f %15.8f\n", i*dy+min, bin[i]/(dy*NR) }\
}'
